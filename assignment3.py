# -*- coding: utf-8 -*-
"""22L_7510.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KBR9dAD3DOpVeRGQA1QCKRJFLpV2xpbE
"""

import pandas as pd
import matplotlib.pyplot as plt

data = pd.read_csv('ex1data1.txt', sep=',', header=None, names=['X', 'Y'])


x = data['X']
y = data['Y']

plt.figure(figsize=(8, 6))
plt.scatter(x, y, color='blue', marker='o')
plt.title('Scatter Plot of Data')
plt.xlabel('X values')
plt.ylabel('Y values')
plt.grid(True)
plt.show()
mean_x = sum(x) / len(x)
mean_y = sum(y) / len(y)


numerator = sum((xi - mean_x) * (yi - mean_y) for xi, yi in zip(x, y))
denominator = sum((xi - mean_x) ** 2 for xi in x)
slope = numerator / denominator


intercept = mean_y - slope * mean_x

print(f"Slope (m): {slope}")
print(f"Intercept (c): {intercept}")

import pandas as pd
import numpy as np

data = pd.read_csv('/content/ex1data2.txt', header=None, names=['SquareMeters', 'Bedrooms', 'Price'])

X = data[['SquareMeters', 'Bedrooms']].values
Y = data['Price'].values
m = len(data)
X = np.column_stack((np.ones(m), X))


theta = np.linalg.inv(X.T.dot(X)).dot(X.T).dot(Y)


new_house = np.array([1, 1650, 3])
predicted_price = new_house.dot(theta)

print("Predicted price for the house:", predicted_price)

import pandas as pd
import numpy as np

data = pd.read_excel('/coin_Bitcoin.xlsx')

data.columns = [col.capitalize() for col in data.columns]

data['Target'] = (data['Low'] + data['High']) / 2
data = data.drop(['Open', 'Close'], axis=1)

train_size = int(0.7 * len(data))
train_data = data[:train_size].drop(columns=['Date'])
test_data = data[train_size:].drop(columns=['Date'])

def train_model(train_data):
    X = train_data.drop('Target', axis=1)
    Y = train_data['Target']

    numeric_columns = X.select_dtypes(include=np.number)
    X = pd.concat([pd.Series(1, index=numeric_columns.index, name='Bias'), numeric_columns], axis=1)

    XTX = X.T.dot(X)
    XTX_inv = pd.DataFrame(np.linalg.pinv(XTX.values), XTX.columns, XTX.index)
    coefficients = XTX_inv.dot(X.T).dot(Y)

    return coefficients

def predict(test_data, coefficients):
    X = test_data.drop('Target', axis=1)
    Y = test_data['Target']
    numeric_columns = X.select_dtypes(include=np.number)
    X = pd.concat([pd.Series(1, index=numeric_columns.index, name='Bias'), numeric_columns], axis=1)
    predictions = X.dot(coefficients)
    return predictions

def mean_absolute_error(true_values, predicted_values):
    return sum(abs(true_values - predicted_values)) / len(true_values)

def mean_squared_error(true_values, predicted_values):
    return sum((true_values - predicted_values) ** 2) / len(true_values)

coefficients = train_model(train_data)
test_predictions = predict(test_data, coefficients)

mae = mean_absolute_error(test_data['Target'], test_predictions)
mse = mean_squared_error(test_data['Target'], test_predictions)

print("Mean Absolute Error:", mae)
print("Mean Squared Error:", mse)